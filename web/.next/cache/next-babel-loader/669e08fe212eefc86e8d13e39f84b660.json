{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jesperlndqvst/github/gundla/web/pages/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"*[_type == \\\"event\\\"][0]\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport client from \"../client\";\nimport groq from \"groq\";\n\nvar Index = function Index(props) {\n  var _props$title = props.title,\n      title = _props$title === void 0 ? \"Missing title\" : _props$title,\n      _props$name = props.name,\n      name = _props$name === void 0 ? \"Missing name\" : _props$name;\n  console.log(props);\n  return __jsx(\"article\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }, title), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, \"By \", name));\n};\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug, query;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // It's important to default the slug so that it doesn't return \"undefined\"\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"\" : _context$query$slug;\n            query = groq(_templateObject());\n            _context.next = 4;\n            return client.fetch(query, {\n              slug: slug\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/jesperlndqvst/github/gundla/web/pages/index.js"],"names":["client","groq","Index","props","title","name","console","log","getInitialProps","context","query","slug","fetch"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AAAA,qBACsCA,KADtC,CACbC,KADa;AAAA,MACbA,KADa,6BACL,eADK;AAAA,oBACsCD,KADtC,CACYE,IADZ;AAAA,MACYA,IADZ,4BACmB,cADnB;AAErBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAL,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAUC,IAAV,CAFJ,CADJ;AAMH,CATD;;KAAMH,K;;AAWNA,KAAK,CAACM,eAAN;AAAA,sEAAwB,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpB;AADoB,kCAEEA,OAAO,CAACC,KAFV,CAEZC,IAFY,EAEZA,IAFY,oCAEL,EAFK;AAGdD,YAAAA,KAHc,GAGNT,IAHM;AAAA;AAAA,mBAIPD,MAAM,CAACY,KAAP,CAAaF,KAAb,EAAoB;AAAEC,cAAAA,IAAI,EAAJA;AAAF,aAApB,CAJO;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeT,KAAf","sourcesContent":["import client from \"../client\";\nimport groq from \"groq\";\n\nconst Index = (props) => {\n    const { title = \"Missing title\", name = \"Missing name\" } = props;\n    console.log(props);\n    return (\n        <article>\n            <h1>{title}</h1>\n            <span>By {name}</span>\n        </article>\n    );\n};\n\nIndex.getInitialProps = async function (context) {\n    // It's important to default the slug so that it doesn't return \"undefined\"\n    const { slug = \"\" } = context.query;\n    const query = groq`*[_type == \"event\"][0]`;\n    return await client.fetch(query, { slug });\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}